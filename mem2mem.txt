 memory-to-memory DMA vs library memcpy() 

For the DUE DMA memory-to-memory transfer, we use the 32-byte FIFO channel 5
and ASAP_CFG.  We compare the DMA times on the DUE and maple with the library
memcpy() and memset() and with a for-loop (dst[i] = src[i]) using
1000 32-bit words.  memcpy32() is the DMA version.  The library memcpy()
uses an unrolled (64) loop of word load/store's.

Times are in microseconds

       maple    DUE
loop     269    132
memcpy32  93     31
memcpy    62     52
memset32  94     34
memset    38     41

DUEling memory copies:

In mem2mem2 we used an asynchronous DMA memory transfer of 1024 32-bit words, 
starting the DMA version then starting the library memcpy. For the maple,
the library memcpy() completes first (64us), then the DMA finishes (122us)
with total elapsed time of 122us.

For the DUE, the DMA copy finishes first (34us), then the memcpy (80us),
with total elapsed time of 82us.  Both src/dst pairs were in SRAM0.
With the memcpy() src/dst pairs in SRAM1, DMA took 33us, and the memcpy
took 60us, with elapsed time of 70us.
